---
# Assert tower version specified
- name: "Assert tower version specified"
  assert:
    that:
      - tower_release_version is defined
    fail_msg: "tower_release_version must be defined"

- name: "Determine whether RabbitMQ vars are required"
  set_fact:
    rabbitmq_required: "{{ not ((tower_release_version is version(3.7, '>=')) or (tower_release_version == 'latest')) }}"

# Download and Extract
- name: "[Tower] Download and Extract Tower"
  unarchive:
    src: "{{ tower_releases_url }}/{{ tower_setup_file }}"
    dest: "{{ tower_working_location }}"
    list_files: true
    remote_src: true
    exclude: "inventory"
  register: tower_download_extract

- name: Set tower_setup_dir
  set_fact:
    tower_setup_dir: "{{ tower_working_location }}/{{ tower_download_extract.files[0] }}"

# Create Inventory
- name: "[Tower] Populate Tower Setup Inventory from Template"
  template:
    src: inventory.j2
    dest: "{{ tower_setup_dir }}/inventory"

# Run the Setup
- name: "[Tower] Run the Ansible Tower Setup Program"
  command: ./setup.sh
  args:
    chdir: "{{ tower_setup_dir }}"
  async: 10000
  poll: 20
  changed_when: false   # these will always run and will always report “changed” otherwise

- name: Wait for ansible tower to be running.
  uri:
    url: "{{ tower_server }}"
    status_code: 200
    validate_certs: false
  register: result
  until: result.status == 200
  retries: 90
  delay: 10
...
